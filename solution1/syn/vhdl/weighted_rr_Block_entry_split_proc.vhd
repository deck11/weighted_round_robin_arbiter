-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity weighted_rr_Block_entry_split_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    reset : IN STD_LOGIC_VECTOR (31 downto 0);
    grant : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    req : IN STD_LOGIC_VECTOR (63 downto 0);
    weight : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of weighted_rr_Block_entry_split_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal current : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal counters_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal counters_ce0 : STD_LOGIC;
    signal counters_we0 : STD_LOGIC;
    signal counters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal counters_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal gmem_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln41_1_reg_542 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_ln18_reg_508 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_3_reg_562 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_2_reg_552 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_block_state1 : BOOLEAN;
    signal icmp_ln18_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal current_load_reg_512 : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_addr_2_reg_523 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln41_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_state21_io : BOOLEAN;
    signal icmp_ln41_1_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state27 : BOOLEAN;
    signal gmem_addr_4_reg_546 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_2_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op127_writeresp_state34 : BOOLEAN;
    signal ap_block_state34 : BOOLEAN;
    signal gmem_addr_5_reg_556 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_3_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_6_reg_566 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op141_writeresp_state41 : BOOLEAN;
    signal ap_block_state41 : BOOLEAN;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_idle : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_ready : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out_ap_vld : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out_ap_vld : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out_ap_vld : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out_ap_vld : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current_ap_vld : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_ce0 : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_we0 : STD_LOGIC;
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln32_reload_cast_fu_349_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln36_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_1_fu_395_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_2_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln42_3_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_op153_writeresp_state48 : BOOLEAN;
    signal ap_block_state48 : BOOLEAN;
    signal counters_we0_local : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal counters_d0_local : STD_LOGIC_VECTOR (31 downto 0);
    signal counters_ce0_local : STD_LOGIC;
    signal counters_address0_local : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln37_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_269_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln32_fu_308_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_fu_312_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_317_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln42_fu_380_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln42_1_fu_385_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln42_1_fu_410_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln42_2_fu_415_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln42_2_fu_440_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln42_3_fu_445_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component weighted_rr_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        current_load : IN STD_LOGIC_VECTOR (2 downto 0);
        req : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        weight : IN STD_LOGIC_VECTOR (63 downto 0);
        p_out : OUT STD_LOGIC_VECTOR (2 downto 0);
        p_out_ap_vld : OUT STD_LOGIC;
        zext_ln32_out : OUT STD_LOGIC_VECTOR (1 downto 0);
        zext_ln32_out_ap_vld : OUT STD_LOGIC;
        shl_ln_out : OUT STD_LOGIC_VECTOR (4 downto 0);
        shl_ln_out_ap_vld : OUT STD_LOGIC;
        counters_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        counters_load_out_ap_vld : OUT STD_LOGIC;
        current : OUT STD_LOGIC_VECTOR (2 downto 0);
        current_ap_vld : OUT STD_LOGIC;
        counters_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
        counters_ce0 : OUT STD_LOGIC;
        counters_we0 : OUT STD_LOGIC;
        counters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        counters_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component weighted_rr_Block_entry_split_proc_counters_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    counters_U : component weighted_rr_Block_entry_split_proc_counters_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 4,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => counters_address0,
        ce0 => counters_ce0,
        we0 => counters_we0,
        d0 => counters_d0,
        q0 => counters_q0);

    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252 : component weighted_rr_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start,
        ap_done => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done,
        ap_idle => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_idle,
        ap_ready => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_ready,
        current_load => current_load_reg_512,
        req => req,
        m_axi_gmem_AWVALID => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => ap_const_logic_0,
        m_axi_gmem_AWADDR => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => ap_const_logic_0,
        m_axi_gmem_WDATA => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => m_axi_gmem_RVALID,
        m_axi_gmem_RREADY => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => m_axi_gmem_RDATA,
        m_axi_gmem_RLAST => m_axi_gmem_RLAST,
        m_axi_gmem_RID => m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM => m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER => m_axi_gmem_RUSER,
        m_axi_gmem_RRESP => m_axi_gmem_RRESP,
        m_axi_gmem_BVALID => ap_const_logic_0,
        m_axi_gmem_BREADY => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => ap_const_lv2_0,
        m_axi_gmem_BID => ap_const_lv1_0,
        m_axi_gmem_BUSER => ap_const_lv1_0,
        weight => weight,
        p_out => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out,
        p_out_ap_vld => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out_ap_vld,
        zext_ln32_out => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out,
        zext_ln32_out_ap_vld => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out_ap_vld,
        shl_ln_out => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out,
        shl_ln_out_ap_vld => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out_ap_vld,
        counters_load_out => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out,
        counters_load_out_ap_vld => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out_ap_vld,
        current => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current,
        current_ap_vld => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current_ap_vld,
        counters_address0 => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_address0,
        counters_ce0 => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_ce0,
        counters_we0 => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_we0,
        counters_d0 => grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_d0,
        counters_q0 => counters_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_state48) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_ready = ap_const_logic_1)) then 
                    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    current_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_gmem_BVALID = ap_const_logic_1))) then 
                current <= ap_const_lv3_0;
            elsif (((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                current <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                current_load_reg_512 <= current;
                icmp_ln18_reg_508 <= icmp_ln18_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                gmem_addr_2_reg_523 <= sext_ln36_fu_327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state27) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                gmem_addr_4_reg_546 <= sext_ln42_1_fu_395_p1;
                icmp_ln41_1_reg_542 <= icmp_ln41_1_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state34) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                gmem_addr_5_reg_556 <= sext_ln42_2_fu_425_p1;
                icmp_ln41_2_reg_552 <= icmp_ln41_2_fu_405_p2;
                icmp_ln41_3_reg_562 <= icmp_ln41_3_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state41) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                gmem_addr_6_reg_566 <= sext_ln42_3_fu_455_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                icmp_ln41_reg_532 <= icmp_ln41_fu_340_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem_AWREADY, m_axi_gmem_WREADY, m_axi_gmem_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state11, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state34, icmp_ln41_1_reg_542, icmp_ln41_reg_532, ap_CS_fsm_state22, ap_CS_fsm_state27, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state48, icmp_ln41_3_reg_562, icmp_ln41_2_reg_552, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state41, ap_block_state1, icmp_ln18_fu_278_p2, ap_block_state21_io, icmp_ln41_1_fu_375_p2, ap_block_state27, icmp_ln41_2_fu_405_p2, ap_block_state34, ap_block_state41, grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done, ap_CS_fsm_state13, ap_block_state48)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln18_fu_278_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif (((icmp_ln18_fu_278_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_gmem_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if ((not(((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln41_reg_532 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif ((not(((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln41_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln41_1_fu_375_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state27) and (icmp_ln41_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                elsif (((ap_const_boolean_0 = ap_block_state27) and (ap_const_logic_1 = ap_CS_fsm_state27) and ((icmp_ln41_1_fu_375_p2 = ap_const_lv1_0) or (icmp_ln41_reg_532 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((icmp_ln41_2_fu_405_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state34) and (icmp_ln41_1_reg_542 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                elsif (((ap_const_boolean_0 = ap_block_state34) and (ap_const_logic_1 = ap_CS_fsm_state34) and ((icmp_ln41_reg_532 = ap_const_lv1_1) or ((icmp_ln41_2_fu_405_p2 = ap_const_lv1_0) or (icmp_ln41_1_reg_542 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state36;
                else
                    ap_NS_fsm <= ap_ST_fsm_state35;
                end if;
            when ap_ST_fsm_state36 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                if (((ap_const_boolean_0 = ap_block_state41) and (icmp_ln41_2_reg_552 = ap_const_lv1_0) and (icmp_ln41_3_reg_562 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state41))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                elsif (((ap_const_boolean_0 = ap_block_state41) and (ap_const_logic_1 = ap_CS_fsm_state41) and ((icmp_ln41_reg_532 = ap_const_lv1_1) or ((icmp_ln41_1_reg_542 = ap_const_lv1_1) or ((icmp_ln41_2_reg_552 = ap_const_lv1_1) or (icmp_ln41_3_reg_562 = ap_const_lv1_0)))))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state42 => 
                if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_state43 => 
                if (((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((ap_const_boolean_0 = ap_block_state48) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln36_fu_312_p2 <= std_logic_vector(signed(sext_ln32_fu_308_p1) + signed(grant));
    add_ln37_fu_357_p2 <= std_logic_vector(unsigned(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out) + unsigned(ap_const_lv32_1));
    add_ln42_1_fu_410_p2 <= std_logic_vector(unsigned(grant) + unsigned(ap_const_lv64_8));
    add_ln42_2_fu_440_p2 <= std_logic_vector(unsigned(grant) + unsigned(ap_const_lv64_C));
    add_ln42_fu_380_p2 <= std_logic_vector(unsigned(grant) + unsigned(ap_const_lv64_4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(m_axi_gmem_BVALID)
    begin
        if ((m_axi_gmem_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state12_blk <= ap_const_logic_0;

    ap_ST_fsm_state13_blk_assign_proc : process(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done)
    begin
        if ((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;

    ap_ST_fsm_state15_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state15_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state15_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state16_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state16_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state16_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;

    ap_ST_fsm_state21_blk_assign_proc : process(m_axi_gmem_BVALID, ap_block_state21_io)
    begin
        if (((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) then 
            ap_ST_fsm_state21_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state21_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state22_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(ap_block_state27)
    begin
        if ((ap_const_boolean_1 = ap_block_state27)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state28_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state28_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state28_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state29_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state29_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state29_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;

    ap_ST_fsm_state34_blk_assign_proc : process(ap_block_state34)
    begin
        if ((ap_const_boolean_1 = ap_block_state34)) then 
            ap_ST_fsm_state34_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state34_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state35_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state35_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state35_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state36_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state40_blk <= ap_const_logic_0;

    ap_ST_fsm_state41_blk_assign_proc : process(ap_block_state41)
    begin
        if ((ap_const_boolean_1 = ap_block_state41)) then 
            ap_ST_fsm_state41_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state41_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state42_blk_assign_proc : process(m_axi_gmem_AWREADY)
    begin
        if ((m_axi_gmem_AWREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state42_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state42_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state43_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state43_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state43_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;

    ap_ST_fsm_state48_blk_assign_proc : process(ap_block_state48)
    begin
        if ((ap_const_boolean_1 = ap_block_state48)) then 
            ap_ST_fsm_state48_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state48_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(m_axi_gmem_WREADY)
    begin
        if ((m_axi_gmem_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state21_io_assign_proc : process(m_axi_gmem_AWREADY, icmp_ln41_reg_532)
    begin
                ap_block_state21_io <= ((m_axi_gmem_AWREADY = ap_const_logic_0) and (icmp_ln41_reg_532 = ap_const_lv1_0));
    end process;


    ap_block_state27_assign_proc : process(m_axi_gmem_BVALID, icmp_ln41_reg_532)
    begin
                ap_block_state27 <= ((icmp_ln41_reg_532 = ap_const_lv1_0) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_state34_assign_proc : process(m_axi_gmem_BVALID, ap_predicate_op127_writeresp_state34)
    begin
                ap_block_state34 <= ((ap_predicate_op127_writeresp_state34 = ap_const_boolean_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_state41_assign_proc : process(m_axi_gmem_BVALID, ap_predicate_op141_writeresp_state41)
    begin
                ap_block_state41 <= ((ap_predicate_op141_writeresp_state41 = ap_const_boolean_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;


    ap_block_state48_assign_proc : process(m_axi_gmem_BVALID, ap_predicate_op153_writeresp_state48)
    begin
                ap_block_state48 <= ((ap_predicate_op153_writeresp_state48 = ap_const_boolean_1) and (m_axi_gmem_BVALID = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state48, ap_block_state48)
    begin
        if (((ap_const_boolean_0 = ap_block_state48) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op127_writeresp_state34_assign_proc : process(icmp_ln41_1_reg_542, icmp_ln41_reg_532)
    begin
                ap_predicate_op127_writeresp_state34 <= ((icmp_ln41_reg_532 = ap_const_lv1_1) or (icmp_ln41_1_reg_542 = ap_const_lv1_0));
    end process;


    ap_predicate_op141_writeresp_state41_assign_proc : process(icmp_ln41_1_reg_542, icmp_ln41_reg_532, icmp_ln41_2_reg_552)
    begin
                ap_predicate_op141_writeresp_state41 <= ((icmp_ln41_reg_532 = ap_const_lv1_1) or ((icmp_ln41_2_reg_552 = ap_const_lv1_0) or (icmp_ln41_1_reg_542 = ap_const_lv1_1)));
    end process;


    ap_predicate_op153_writeresp_state48_assign_proc : process(icmp_ln41_1_reg_542, icmp_ln41_reg_532, icmp_ln18_reg_508, icmp_ln41_3_reg_562, icmp_ln41_2_reg_552)
    begin
                ap_predicate_op153_writeresp_state48 <= (((((icmp_ln41_2_reg_552 = ap_const_lv1_1) and (icmp_ln18_reg_508 = ap_const_lv1_1)) or ((icmp_ln41_3_reg_562 = ap_const_lv1_0) and (icmp_ln18_reg_508 = ap_const_lv1_1))) or ((icmp_ln18_reg_508 = ap_const_lv1_1) and (icmp_ln41_1_reg_542 = ap_const_lv1_1))) or ((icmp_ln18_reg_508 = ap_const_lv1_1) and (icmp_ln41_reg_532 = ap_const_lv1_1)));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state48, ap_block_state48)
    begin
        if (((ap_const_boolean_0 = ap_block_state48) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    counters_address0_assign_proc : process(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_address0, ap_CS_fsm_state13, counters_address0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            counters_address0 <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_address0;
        else 
            counters_address0 <= counters_address0_local;
        end if; 
    end process;


    counters_address0_local_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state11, zext_ln32_reload_cast_fu_349_p1, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            counters_address0_local <= zext_ln32_reload_cast_fu_349_p1(2 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            counters_address0_local <= ap_const_lv2_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            counters_address0_local <= ap_const_lv2_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            counters_address0_local <= ap_const_lv2_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            counters_address0_local <= ap_const_lv2_0;
        else 
            counters_address0_local <= "XX";
        end if; 
    end process;


    counters_ce0_assign_proc : process(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_ce0, ap_CS_fsm_state13, counters_ce0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            counters_ce0 <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_ce0;
        else 
            counters_ce0 <= counters_ce0_local;
        end if; 
    end process;


    counters_ce0_local_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state21, ap_CS_fsm_state11, ap_block_state21_io, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_gmem_BVALID = ap_const_logic_1)))) then 
            counters_ce0_local <= ap_const_logic_1;
        else 
            counters_ce0_local <= ap_const_logic_0;
        end if; 
    end process;


    counters_d0_assign_proc : process(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_d0, ap_CS_fsm_state13, counters_d0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            counters_d0 <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_d0;
        else 
            counters_d0 <= counters_d0_local;
        end if; 
    end process;


    counters_d0_local_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state11, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, add_ln37_fu_357_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            counters_d0_local <= add_ln37_fu_357_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            counters_d0_local <= ap_const_lv32_0;
        else 
            counters_d0_local <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    counters_we0_assign_proc : process(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_we0, ap_CS_fsm_state13, counters_we0_local)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            counters_we0 <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_we0;
        else 
            counters_we0 <= counters_we0_local;
        end if; 
    end process;


    counters_we0_local_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state21, ap_CS_fsm_state11, ap_block_state21_io, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (not(((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_gmem_BVALID = ap_const_logic_1)))) then 
            counters_we0_local <= ap_const_logic_1;
        else 
            counters_we0_local <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AW_assign_proc : process(m_axi_gmem_AWREADY, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state28, icmp_ln41_reg_532, ap_CS_fsm_state42, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((icmp_ln41_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)))) then 
            gmem_blk_n_AW <= m_axi_gmem_AWREADY;
        else 
            gmem_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_B_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state21, ap_CS_fsm_state11, ap_CS_fsm_state34, icmp_ln41_1_reg_542, icmp_ln41_reg_532, ap_CS_fsm_state27, ap_CS_fsm_state48, icmp_ln18_reg_508, icmp_ln41_3_reg_562, icmp_ln41_2_reg_552, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_logic_1 = ap_CS_fsm_state41) and ((icmp_ln41_reg_532 = ap_const_lv1_1) or ((icmp_ln41_2_reg_552 = ap_const_lv1_0) or (icmp_ln41_1_reg_542 = ap_const_lv1_1)))) or ((ap_const_logic_1 = ap_CS_fsm_state48) and (((((icmp_ln41_2_reg_552 = ap_const_lv1_1) and (icmp_ln18_reg_508 = ap_const_lv1_1)) or ((icmp_ln41_3_reg_562 = ap_const_lv1_0) and (icmp_ln18_reg_508 = ap_const_lv1_1))) or ((icmp_ln18_reg_508 = ap_const_lv1_1) and (icmp_ln41_1_reg_542 = ap_const_lv1_1))) or ((icmp_ln18_reg_508 = ap_const_lv1_1) and (icmp_ln41_reg_532 = ap_const_lv1_1)))) or ((icmp_ln41_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_logic_1 = ap_CS_fsm_state34) and ((icmp_ln41_reg_532 = ap_const_lv1_1) or (icmp_ln41_1_reg_542 = ap_const_lv1_0))))) then 
            gmem_blk_n_B <= m_axi_gmem_BVALID;
        else 
            gmem_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_W_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state16, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state36)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg;
    grp_fu_269_p4 <= grant(63 downto 2);
    icmp_ln18_fu_278_p2 <= "1" when (reset = ap_const_lv32_0) else "0";
    icmp_ln41_1_fu_375_p2 <= "1" when (grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out = ap_const_lv3_1) else "0";
    icmp_ln41_2_fu_405_p2 <= "1" when (grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out = ap_const_lv3_2) else "0";
    icmp_ln41_3_fu_435_p2 <= "1" when (grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out = ap_const_lv3_3) else "0";
    icmp_ln41_fu_340_p2 <= "1" when (grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out = ap_const_lv3_0) else "0";
    m_axi_gmem_ARADDR <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARADDR;
    m_axi_gmem_ARBURST <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARBURST;
    m_axi_gmem_ARCACHE <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARCACHE;
    m_axi_gmem_ARID <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARID;
    m_axi_gmem_ARLEN <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLEN;
    m_axi_gmem_ARLOCK <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLOCK;
    m_axi_gmem_ARPROT <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARPROT;
    m_axi_gmem_ARQOS <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARQOS;
    m_axi_gmem_ARREGION <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARREGION;
    m_axi_gmem_ARSIZE <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARSIZE;
    m_axi_gmem_ARUSER <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARUSER;

    m_axi_gmem_ARVALID_assign_proc : process(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARVALID, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem_ARVALID <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARVALID;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_AWADDR_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state28, icmp_ln41_reg_532, ap_CS_fsm_state42, ap_CS_fsm_state35, gmem_addr_2_reg_523, ap_block_state21_io, gmem_addr_4_reg_546, gmem_addr_5_reg_556, gmem_addr_6_reg_566, sext_ln23_fu_288_p1, sext_ln42_fu_364_p1)
    begin
        if (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
            m_axi_gmem_AWADDR <= gmem_addr_6_reg_566;
        elsif (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            m_axi_gmem_AWADDR <= gmem_addr_5_reg_556;
        elsif (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            m_axi_gmem_AWADDR <= gmem_addr_4_reg_546;
        elsif ((not(((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln41_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            m_axi_gmem_AWADDR <= sext_ln42_fu_364_p1;
        elsif (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
            m_axi_gmem_AWADDR <= gmem_addr_2_reg_523;
        elsif (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_AWADDR <= sext_ln23_fu_288_p1;
        else 
            m_axi_gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;

    m_axi_gmem_AWLEN_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state28, icmp_ln41_reg_532, ap_CS_fsm_state42, ap_CS_fsm_state35, ap_block_state21_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln41_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            m_axi_gmem_AWLEN <= ap_const_lv64_1(32 - 1 downto 0);
        elsif (((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_AWLEN <= ap_const_lv64_4(32 - 1 downto 0);
        else 
            m_axi_gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;

    m_axi_gmem_AWVALID_assign_proc : process(m_axi_gmem_AWREADY, m_axi_gmem_BVALID, ap_CS_fsm_state15, ap_CS_fsm_state21, ap_CS_fsm_state2, ap_CS_fsm_state28, icmp_ln41_reg_532, ap_CS_fsm_state42, ap_CS_fsm_state35, ap_block_state21_io)
    begin
        if (((not(((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (icmp_ln41_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state35)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((m_axi_gmem_AWREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
            m_axi_gmem_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_BREADY_assign_proc : process(m_axi_gmem_BVALID, ap_CS_fsm_state21, ap_CS_fsm_state11, ap_CS_fsm_state34, icmp_ln41_reg_532, ap_CS_fsm_state27, ap_CS_fsm_state48, ap_CS_fsm_state41, ap_block_state21_io, ap_block_state27, ap_predicate_op127_writeresp_state34, ap_block_state34, ap_predicate_op141_writeresp_state41, ap_block_state41, ap_predicate_op153_writeresp_state48, ap_block_state48)
    begin
        if ((((ap_predicate_op153_writeresp_state48 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state48) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((ap_predicate_op141_writeresp_state41 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state41) and (ap_const_logic_1 = ap_CS_fsm_state41)) or ((ap_predicate_op127_writeresp_state34 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_state34) and (ap_const_logic_1 = ap_CS_fsm_state34)) or ((ap_const_boolean_0 = ap_block_state27) and (icmp_ln41_reg_532 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27)) or (not(((ap_const_boolean_1 = ap_block_state21_io) or (m_axi_gmem_BVALID = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (m_axi_gmem_BVALID = ap_const_logic_1)))) then 
            m_axi_gmem_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_RREADY_assign_proc : process(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_RREADY, ap_CS_fsm_state12, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            m_axi_gmem_RREADY <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_RREADY;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem_WDATA_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            m_axi_gmem_WDATA <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            m_axi_gmem_WDATA <= ap_const_lv32_0;
        else 
            m_axi_gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(m_axi_gmem_WREADY, ap_CS_fsm_state16, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state29, ap_CS_fsm_state22, ap_CS_fsm_state43, ap_CS_fsm_state36)
    begin
        if ((((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((m_axi_gmem_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln23_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_269_p4),64));

        sext_ln32_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out),64));

        sext_ln36_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_317_p4),64));

        sext_ln42_1_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_1_fu_385_p4),64));

        sext_ln42_2_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_2_fu_415_p4),64));

        sext_ln42_3_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln42_3_fu_445_p4),64));

        sext_ln42_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_269_p4),64));

    trunc_ln3_fu_317_p4 <= add_ln36_fu_312_p2(63 downto 2);
    trunc_ln42_1_fu_385_p4 <= add_ln42_fu_380_p2(63 downto 2);
    trunc_ln42_2_fu_415_p4 <= add_ln42_1_fu_410_p2(63 downto 2);
    trunc_ln42_3_fu_445_p4 <= add_ln42_2_fu_440_p2(63 downto 2);
    zext_ln32_reload_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out),64));
end behav;
