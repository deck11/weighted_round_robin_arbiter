// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module weighted_rr_Block_entry_split_proc (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        reset,
        grant,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RFIFONUM,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        req,
        weight
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_state32 = 48'd2147483648;
parameter    ap_ST_fsm_state33 = 48'd4294967296;
parameter    ap_ST_fsm_state34 = 48'd8589934592;
parameter    ap_ST_fsm_state35 = 48'd17179869184;
parameter    ap_ST_fsm_state36 = 48'd34359738368;
parameter    ap_ST_fsm_state37 = 48'd68719476736;
parameter    ap_ST_fsm_state38 = 48'd137438953472;
parameter    ap_ST_fsm_state39 = 48'd274877906944;
parameter    ap_ST_fsm_state40 = 48'd549755813888;
parameter    ap_ST_fsm_state41 = 48'd1099511627776;
parameter    ap_ST_fsm_state42 = 48'd2199023255552;
parameter    ap_ST_fsm_state43 = 48'd4398046511104;
parameter    ap_ST_fsm_state44 = 48'd8796093022208;
parameter    ap_ST_fsm_state45 = 48'd17592186044416;
parameter    ap_ST_fsm_state46 = 48'd35184372088832;
parameter    ap_ST_fsm_state47 = 48'd70368744177664;
parameter    ap_ST_fsm_state48 = 48'd140737488355328;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] reset;
input  [63:0] grant;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [8:0] m_axi_gmem_RFIFONUM;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] req;
input  [63:0] weight;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg[31:0] m_axi_gmem_AWLEN;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg m_axi_gmem_ARVALID;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] current;
reg   [1:0] counters_address0;
reg    counters_ce0;
reg    counters_we0;
reg   [31:0] counters_d0;
wire   [31:0] counters_q0;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state15;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state16;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
reg   [0:0] icmp_ln41_1_reg_542;
reg   [0:0] icmp_ln41_reg_532;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state48;
reg   [0:0] icmp_ln18_reg_508;
reg   [0:0] icmp_ln41_3_reg_562;
reg   [0:0] icmp_ln41_2_reg_552;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state41;
reg    ap_block_state1;
wire   [0:0] icmp_ln18_fu_278_p2;
reg   [2:0] current_load_reg_512;
reg   [63:0] gmem_addr_2_reg_523;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln41_fu_340_p2;
wire    ap_CS_fsm_state20;
reg    ap_block_state21_io;
wire   [0:0] icmp_ln41_1_fu_375_p2;
reg    ap_block_state27;
reg   [63:0] gmem_addr_4_reg_546;
wire   [0:0] icmp_ln41_2_fu_405_p2;
reg    ap_predicate_op127_writeresp_state34;
reg    ap_block_state34;
reg   [63:0] gmem_addr_5_reg_556;
wire   [0:0] icmp_ln41_3_fu_435_p2;
reg   [63:0] gmem_addr_6_reg_566;
reg    ap_predicate_op141_writeresp_state41;
reg    ap_block_state41;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_idle;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_ready;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWVALID;
wire   [63:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWADDR;
wire   [0:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWID;
wire   [31:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWLEN;
wire   [2:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWSIZE;
wire   [1:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWBURST;
wire   [1:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWLOCK;
wire   [3:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWCACHE;
wire   [2:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWPROT;
wire   [3:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWQOS;
wire   [3:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWREGION;
wire   [0:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWUSER;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WVALID;
wire   [31:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WDATA;
wire   [3:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WSTRB;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WLAST;
wire   [0:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WID;
wire   [0:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WUSER;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARVALID;
wire   [63:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARADDR;
wire   [0:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARID;
wire   [31:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLEN;
wire   [2:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARSIZE;
wire   [1:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARBURST;
wire   [1:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLOCK;
wire   [3:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARCACHE;
wire   [2:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARPROT;
wire   [3:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARQOS;
wire   [3:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARREGION;
wire   [0:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARUSER;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_RREADY;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_BREADY;
wire   [2:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out_ap_vld;
wire   [1:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out_ap_vld;
wire   [4:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out_ap_vld;
wire   [31:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out_ap_vld;
wire   [2:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current_ap_vld;
wire   [1:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_address0;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_ce0;
wire    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_we0;
wire   [31:0] grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_d0;
reg    grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln32_reload_cast_fu_349_p1;
wire  signed [63:0] sext_ln23_fu_288_p1;
wire  signed [63:0] sext_ln36_fu_327_p1;
wire  signed [63:0] sext_ln42_fu_364_p1;
wire  signed [63:0] sext_ln42_1_fu_395_p1;
wire  signed [63:0] sext_ln42_2_fu_425_p1;
wire  signed [63:0] sext_ln42_3_fu_455_p1;
reg    ap_predicate_op153_writeresp_state48;
reg    ap_block_state48;
reg    counters_we0_local;
wire    ap_CS_fsm_state8;
reg   [31:0] counters_d0_local;
reg    counters_ce0_local;
reg   [1:0] counters_address0_local;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire   [31:0] add_ln37_fu_357_p2;
wire   [61:0] grp_fu_269_p4;
wire  signed [63:0] sext_ln32_fu_308_p1;
wire   [63:0] add_ln36_fu_312_p2;
wire   [61:0] trunc_ln3_fu_317_p4;
wire   [63:0] add_ln42_fu_380_p2;
wire   [61:0] trunc_ln42_1_fu_385_p4;
wire   [63:0] add_ln42_1_fu_410_p2;
wire   [61:0] trunc_ln42_2_fu_415_p4;
wire   [63:0] add_ln42_2_fu_440_p2;
wire   [61:0] trunc_ln42_3_fu_445_p4;
reg   [47:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
reg    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
reg    ap_ST_fsm_state15_blk;
reg    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
reg    ap_ST_fsm_state21_blk;
reg    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
reg    ap_ST_fsm_state27_blk;
reg    ap_ST_fsm_state28_blk;
reg    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
reg    ap_ST_fsm_state34_blk;
reg    ap_ST_fsm_state35_blk;
reg    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
reg    ap_ST_fsm_state41_blk;
reg    ap_ST_fsm_state42_blk;
reg    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
wire    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
reg    ap_ST_fsm_state48_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 48'd1;
#0 current = 3'd0;
#0 grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg = 1'b0;
end

weighted_rr_Block_entry_split_proc_counters_RAM_1P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 4 ),
    .AddressWidth( 2 ))
counters_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(counters_address0),
    .ce0(counters_ce0),
    .we0(counters_we0),
    .d0(counters_d0),
    .q0(counters_q0)
);

weighted_rr_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2 grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start),
    .ap_done(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done),
    .ap_idle(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_idle),
    .ap_ready(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_ready),
    .current_load(current_load_reg_512),
    .req(req),
    .m_axi_gmem_AWVALID(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(1'b0),
    .m_axi_gmem_AWADDR(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(1'b0),
    .m_axi_gmem_WDATA(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(m_axi_gmem_ARREADY),
    .m_axi_gmem_ARADDR(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(m_axi_gmem_RVALID),
    .m_axi_gmem_RREADY(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(m_axi_gmem_RDATA),
    .m_axi_gmem_RLAST(m_axi_gmem_RLAST),
    .m_axi_gmem_RID(m_axi_gmem_RID),
    .m_axi_gmem_RFIFONUM(m_axi_gmem_RFIFONUM),
    .m_axi_gmem_RUSER(m_axi_gmem_RUSER),
    .m_axi_gmem_RRESP(m_axi_gmem_RRESP),
    .m_axi_gmem_BVALID(1'b0),
    .m_axi_gmem_BREADY(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(2'd0),
    .m_axi_gmem_BID(1'd0),
    .m_axi_gmem_BUSER(1'd0),
    .weight(weight),
    .p_out(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out),
    .p_out_ap_vld(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out_ap_vld),
    .zext_ln32_out(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out),
    .zext_ln32_out_ap_vld(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out_ap_vld),
    .shl_ln_out(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out),
    .shl_ln_out_ap_vld(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out_ap_vld),
    .counters_load_out(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out),
    .counters_load_out_ap_vld(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out_ap_vld),
    .current(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current),
    .current_ap_vld(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current_ap_vld),
    .counters_address0(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_address0),
    .counters_ce0(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_ce0),
    .counters_we0(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_we0),
    .counters_d0(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_d0),
    .counters_q0(counters_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_state48) & (1'b1 == ap_CS_fsm_state48))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg <= 1'b1;
        end else if ((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_ready == 1'b1)) begin
            grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (m_axi_gmem_BVALID == 1'b1))) begin
        current <= 3'd0;
    end else if (((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current_ap_vld == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
        current <= grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_current;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        current_load_reg_512 <= current;
        icmp_ln18_reg_508 <= icmp_ln18_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        gmem_addr_2_reg_523 <= sext_ln36_fu_327_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state27) & (1'b1 == ap_CS_fsm_state27))) begin
        gmem_addr_4_reg_546 <= sext_ln42_1_fu_395_p1;
        icmp_ln41_1_reg_542 <= icmp_ln41_1_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state34) & (1'b1 == ap_CS_fsm_state34))) begin
        gmem_addr_5_reg_556 <= sext_ln42_2_fu_425_p1;
        icmp_ln41_2_reg_552 <= icmp_ln41_2_fu_405_p2;
        icmp_ln41_3_reg_562 <= icmp_ln41_3_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state41) & (1'b1 == ap_CS_fsm_state41))) begin
        gmem_addr_6_reg_566 <= sext_ln42_3_fu_455_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        icmp_ln41_reg_532 <= icmp_ln41_fu_340_p2;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_BVALID == 1'b0)) begin
        ap_ST_fsm_state11_blk = 1'b1;
    end else begin
        ap_ST_fsm_state11_blk = 1'b0;
    end
end

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

assign ap_ST_fsm_state14_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state15_blk = 1'b1;
    end else begin
        ap_ST_fsm_state15_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state16_blk = 1'b1;
    end else begin
        ap_ST_fsm_state16_blk = 1'b0;
    end
end

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0))) begin
        ap_ST_fsm_state21_blk = 1'b1;
    end else begin
        ap_ST_fsm_state21_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state22_blk = 1'b1;
    end else begin
        ap_ST_fsm_state22_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state27)) begin
        ap_ST_fsm_state27_blk = 1'b1;
    end else begin
        ap_ST_fsm_state27_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state28_blk = 1'b1;
    end else begin
        ap_ST_fsm_state28_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state29_blk = 1'b1;
    end else begin
        ap_ST_fsm_state29_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state34)) begin
        ap_ST_fsm_state34_blk = 1'b1;
    end else begin
        ap_ST_fsm_state34_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state35_blk = 1'b1;
    end else begin
        ap_ST_fsm_state35_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state36_blk = 1'b1;
    end else begin
        ap_ST_fsm_state36_blk = 1'b0;
    end
end

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

assign ap_ST_fsm_state40_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state41)) begin
        ap_ST_fsm_state41_blk = 1'b1;
    end else begin
        ap_ST_fsm_state41_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_AWREADY == 1'b0)) begin
        ap_ST_fsm_state42_blk = 1'b1;
    end else begin
        ap_ST_fsm_state42_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state43_blk = 1'b1;
    end else begin
        ap_ST_fsm_state43_blk = 1'b0;
    end
end

assign ap_ST_fsm_state44_blk = 1'b0;

assign ap_ST_fsm_state45_blk = 1'b0;

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state48)) begin
        ap_ST_fsm_state48_blk = 1'b1;
    end else begin
        ap_ST_fsm_state48_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem_WREADY == 1'b0)) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_state48) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state48) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        counters_address0 = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_address0;
    end else begin
        counters_address0 = counters_address0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        counters_address0_local = zext_ln32_reload_cast_fu_349_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        counters_address0_local = 2'd3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        counters_address0_local = 2'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        counters_address0_local = 2'd1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        counters_address0_local = 2'd0;
    end else begin
        counters_address0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        counters_ce0 = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_ce0;
    end else begin
        counters_ce0 = counters_ce0_local;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (~((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == ap_CS_fsm_state11) & (m_axi_gmem_BVALID == 1'b1)))) begin
        counters_ce0_local = 1'b1;
    end else begin
        counters_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        counters_d0 = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_d0;
    end else begin
        counters_d0 = counters_d0_local;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        counters_d0_local = add_ln37_fu_357_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11))) begin
        counters_d0_local = 32'd0;
    end else begin
        counters_d0_local = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        counters_we0 = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_we0;
    end else begin
        counters_we0 = counters_we0_local;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (~((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == ap_CS_fsm_state11) & (m_axi_gmem_BVALID == 1'b1)))) begin
        counters_we0_local = 1'b1;
    end else begin
        counters_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state15) | ((icmp_ln41_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state21)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state41) & ((icmp_ln41_reg_532 == 1'd1) | ((icmp_ln41_2_reg_552 == 1'd0) | (icmp_ln41_1_reg_542 == 1'd1)))) | ((1'b1 == ap_CS_fsm_state48) & (((((icmp_ln41_2_reg_552 == 1'd1) & (icmp_ln18_reg_508 == 1'd1)) | ((icmp_ln41_3_reg_562 == 1'd0) & (icmp_ln18_reg_508 == 1'd1))) | ((icmp_ln18_reg_508 == 1'd1) & (icmp_ln41_1_reg_542 == 1'd1))) | ((icmp_ln18_reg_508 == 1'd1) & (icmp_ln41_reg_532 == 1'd1)))) | ((icmp_ln41_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state27)) | ((1'b1 == ap_CS_fsm_state34) & ((icmp_ln41_reg_532 == 1'd1) | (icmp_ln41_1_reg_542 == 1'd0))))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state16))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_ARVALID = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARVALID;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_gmem_AWADDR = gmem_addr_6_reg_566;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
        m_axi_gmem_AWADDR = gmem_addr_5_reg_556;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
        m_axi_gmem_AWADDR = gmem_addr_4_reg_546;
    end else if ((~((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln41_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
        m_axi_gmem_AWADDR = sext_ln42_fu_364_p1;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
        m_axi_gmem_AWADDR = gmem_addr_2_reg_523;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_AWADDR = sext_ln23_fu_288_p1;
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln41_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        m_axi_gmem_AWLEN = 64'd1;
    end else if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem_AWLEN = 64'd4;
    end else begin
        m_axi_gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln41_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state21)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2)) | ((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15)))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_predicate_op153_writeresp_state48 == 1'b1) & (1'b0 == ap_block_state48) & (1'b1 == ap_CS_fsm_state48)) | ((ap_predicate_op141_writeresp_state41 == 1'b1) & (1'b0 == ap_block_state41) & (1'b1 == ap_CS_fsm_state41)) | ((ap_predicate_op127_writeresp_state34 == 1'b1) & (1'b0 == ap_block_state34) & (1'b1 == ap_CS_fsm_state34)) | ((1'b0 == ap_block_state27) & (icmp_ln41_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state27)) | (~((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state21)) | ((1'b1 == ap_CS_fsm_state11) & (m_axi_gmem_BVALID == 1'b1)))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_gmem_RREADY = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_RREADY;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        m_axi_gmem_WDATA = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem_WDATA = 32'd0;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | ((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16)))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln18_fu_278_p2 == 1'd1) & (1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if (((icmp_ln18_fu_278_p2 == 1'd0) & (1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (m_axi_gmem_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state15))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if ((~((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln41_reg_532 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else if ((~((1'b1 == ap_block_state21_io) | (m_axi_gmem_BVALID == 1'b0)) & (icmp_ln41_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            if (((icmp_ln41_1_fu_375_p2 == 1'd1) & (1'b0 == ap_block_state27) & (icmp_ln41_reg_532 == 1'd0) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else if (((1'b0 == ap_block_state27) & (1'b1 == ap_CS_fsm_state27) & ((icmp_ln41_1_fu_375_p2 == 1'd0) | (icmp_ln41_reg_532 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state28))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state29))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln41_2_fu_405_p2 == 1'd1) & (1'b0 == ap_block_state34) & (icmp_ln41_1_reg_542 == 1'd0) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else if (((1'b0 == ap_block_state34) & (1'b1 == ap_CS_fsm_state34) & ((icmp_ln41_reg_532 == 1'd1) | ((icmp_ln41_2_fu_405_p2 == 1'd0) | (icmp_ln41_1_reg_542 == 1'd1))))) begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state35 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state35))) begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state36 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state36))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            if (((1'b0 == ap_block_state41) & (icmp_ln41_2_reg_552 == 1'd0) & (icmp_ln41_3_reg_562 == 1'd1) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else if (((1'b0 == ap_block_state41) & (1'b1 == ap_CS_fsm_state41) & ((icmp_ln41_reg_532 == 1'd1) | ((icmp_ln41_1_reg_542 == 1'd1) | ((icmp_ln41_2_reg_552 == 1'd1) | (icmp_ln41_3_reg_562 == 1'd0)))))) begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end
        end
        ap_ST_fsm_state42 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((1'b0 == ap_block_state48) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_fu_312_p2 = ($signed(sext_ln32_fu_308_p1) + $signed(grant));

assign add_ln37_fu_357_p2 = (grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_counters_load_out + 32'd1);

assign add_ln42_1_fu_410_p2 = (grant + 64'd8);

assign add_ln42_2_fu_440_p2 = (grant + 64'd12);

assign add_ln42_fu_380_p2 = (grant + 64'd4);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state21_io = ((m_axi_gmem_AWREADY == 1'b0) & (icmp_ln41_reg_532 == 1'd0));
end

always @ (*) begin
    ap_block_state27 = ((icmp_ln41_reg_532 == 1'd0) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state34 = ((ap_predicate_op127_writeresp_state34 == 1'b1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state41 = ((ap_predicate_op141_writeresp_state41 == 1'b1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state48 = ((ap_predicate_op153_writeresp_state48 == 1'b1) & (m_axi_gmem_BVALID == 1'b0));
end

always @ (*) begin
    ap_predicate_op127_writeresp_state34 = ((icmp_ln41_reg_532 == 1'd1) | (icmp_ln41_1_reg_542 == 1'd0));
end

always @ (*) begin
    ap_predicate_op141_writeresp_state41 = ((icmp_ln41_reg_532 == 1'd1) | ((icmp_ln41_2_reg_552 == 1'd0) | (icmp_ln41_1_reg_542 == 1'd1)));
end

always @ (*) begin
    ap_predicate_op153_writeresp_state48 = (((((icmp_ln41_2_reg_552 == 1'd1) & (icmp_ln18_reg_508 == 1'd1)) | ((icmp_ln41_3_reg_562 == 1'd0) & (icmp_ln18_reg_508 == 1'd1))) | ((icmp_ln18_reg_508 == 1'd1) & (icmp_ln41_1_reg_542 == 1'd1))) | ((icmp_ln18_reg_508 == 1'd1) & (icmp_ln41_reg_532 == 1'd1)));
end

assign grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_ap_start_reg;

assign grp_fu_269_p4 = {{grant[63:2]}};

assign icmp_ln18_fu_278_p2 = ((reset == 32'd0) ? 1'b1 : 1'b0);

assign icmp_ln41_1_fu_375_p2 = ((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out == 3'd1) ? 1'b1 : 1'b0);

assign icmp_ln41_2_fu_405_p2 = ((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln41_3_fu_435_p2 = ((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out == 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_340_p2 = ((grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_p_out == 3'd0) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARADDR = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARADDR;

assign m_axi_gmem_ARBURST = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARBURST;

assign m_axi_gmem_ARCACHE = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARCACHE;

assign m_axi_gmem_ARID = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARID;

assign m_axi_gmem_ARLEN = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLEN;

assign m_axi_gmem_ARLOCK = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARLOCK;

assign m_axi_gmem_ARPROT = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARPROT;

assign m_axi_gmem_ARQOS = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARQOS;

assign m_axi_gmem_ARREGION = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARREGION;

assign m_axi_gmem_ARSIZE = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARSIZE;

assign m_axi_gmem_ARUSER = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_m_axi_gmem_ARUSER;

assign m_axi_gmem_AWBURST = 2'd0;

assign m_axi_gmem_AWCACHE = 4'd0;

assign m_axi_gmem_AWID = 1'd0;

assign m_axi_gmem_AWLOCK = 2'd0;

assign m_axi_gmem_AWPROT = 3'd0;

assign m_axi_gmem_AWQOS = 4'd0;

assign m_axi_gmem_AWREGION = 4'd0;

assign m_axi_gmem_AWSIZE = 3'd0;

assign m_axi_gmem_AWUSER = 1'd0;

assign m_axi_gmem_WID = 1'd0;

assign m_axi_gmem_WLAST = 1'b0;

assign m_axi_gmem_WSTRB = 4'd15;

assign m_axi_gmem_WUSER = 1'd0;

assign sext_ln23_fu_288_p1 = $signed(grp_fu_269_p4);

assign sext_ln32_fu_308_p1 = $signed(grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_shl_ln_out);

assign sext_ln36_fu_327_p1 = $signed(trunc_ln3_fu_317_p4);

assign sext_ln42_1_fu_395_p1 = $signed(trunc_ln42_1_fu_385_p4);

assign sext_ln42_2_fu_425_p1 = $signed(trunc_ln42_2_fu_415_p4);

assign sext_ln42_3_fu_455_p1 = $signed(trunc_ln42_3_fu_445_p4);

assign sext_ln42_fu_364_p1 = $signed(grp_fu_269_p4);

assign trunc_ln3_fu_317_p4 = {{add_ln36_fu_312_p2[63:2]}};

assign trunc_ln42_1_fu_385_p4 = {{add_ln42_fu_380_p2[63:2]}};

assign trunc_ln42_2_fu_415_p4 = {{add_ln42_1_fu_410_p2[63:2]}};

assign trunc_ln42_3_fu_445_p4 = {{add_ln42_2_fu_440_p2[63:2]}};

assign zext_ln32_reload_cast_fu_349_p1 = grp_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2_fu_252_zext_ln32_out;

endmodule //weighted_rr_Block_entry_split_proc
