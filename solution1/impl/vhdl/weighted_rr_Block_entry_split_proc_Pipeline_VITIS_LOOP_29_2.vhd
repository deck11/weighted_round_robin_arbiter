-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity weighted_rr_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    current_load : IN STD_LOGIC_VECTOR (2 downto 0);
    req : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    weight : IN STD_LOGIC_VECTOR (63 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (2 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    zext_ln32_out : OUT STD_LOGIC_VECTOR (1 downto 0);
    zext_ln32_out_ap_vld : OUT STD_LOGIC;
    shl_ln_out : OUT STD_LOGIC_VECTOR (4 downto 0);
    shl_ln_out_ap_vld : OUT STD_LOGIC;
    counters_load_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    counters_load_out_ap_vld : OUT STD_LOGIC;
    current : OUT STD_LOGIC_VECTOR (2 downto 0);
    current_ap_vld : OUT STD_LOGIC;
    counters_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    counters_ce0 : OUT STD_LOGIC;
    counters_we0 : OUT STD_LOGIC;
    counters_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    counters_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of weighted_rr_Block_entry_split_proc_Pipeline_VITIS_LOOP_29_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal icmp_ln32_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage20 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal p_load_reg_355 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln32_fu_198_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln32_reg_362 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_202_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_368 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln32_2_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_2_reg_373 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_reg_378 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_384 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal sext_ln32_fu_240_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln32_reg_389 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln32_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal counters_addr_reg_398 : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_addr_1_reg_403 : STD_LOGIC_VECTOR (63 downto 0);
    signal counters_load_reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state12_io : BOOLEAN;
    signal gmem_addr_1_read_reg_415 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal zext_ln32_fu_243_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_1_fu_230_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln34_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln52_fu_324_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_fu_102 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_p_load : STD_LOGIC_VECTOR (2 downto 0);
    signal counters_ce0_local : STD_LOGIC;
    signal counters_address0_local : STD_LOGIC_VECTOR (1 downto 0);
    signal counters_we0_local : STD_LOGIC;
    signal trunc_ln32_fu_198_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_202_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln32_fu_214_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_220_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln34_fu_252_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_256_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln52_fu_280_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln52_fu_297_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_and_t_fu_302_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln52_fu_293_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_fu_285_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln52_fu_310_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_316_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component weighted_rr_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component weighted_rr_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage20,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    empty_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0))) then 
                empty_fu_102 <= current_load;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state21) and ((icmp_ln34_fu_276_p2 = ap_const_lv1_0) or (icmp_ln32_reg_394 = ap_const_lv1_0)))) then 
                empty_fu_102 <= select_ln52_fu_324_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                counters_addr_reg_398 <= zext_ln32_fu_243_p1(2 - 1 downto 0);
                gmem_addr_1_reg_403 <= sext_ln34_fu_266_p1;
                icmp_ln32_reg_394 <= icmp_ln32_fu_247_p2;
                sext_ln32_reg_389 <= sext_ln32_fu_240_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_io))) then
                counters_load_reg_409 <= counters_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_pp0_stage19_iter0))) then
                gmem_addr_1_read_reg_415 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_pp0_stage9_iter0))) then
                gmem_addr_read_reg_384 <= m_axi_gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0))) then
                gmem_addr_reg_378 <= sext_ln32_1_fu_230_p1;
                p_load_reg_355 <= ap_sig_allocacmp_p_load;
                    sext_ln32_2_reg_373(63 downto 2) <= sext_ln32_2_fu_210_p1(63 downto 2);
                    shl_ln_reg_368(4 downto 2) <= shl_ln_fu_202_p3(4 downto 2);
                trunc_ln32_reg_362 <= trunc_ln32_fu_198_p1;
            end if;
        end if;
    end process;
    shl_ln_reg_368(1 downto 0) <= "00";
    sext_ln32_2_reg_373(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state21, m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_block_state1_pp0_stage0_iter0, ap_block_state10_pp0_stage9_iter0, ap_block_state12_io, ap_block_state20_pp0_stage19_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_pp0_stage9_iter0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_io))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_pp0_stage19_iter0))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln32_fu_214_p2 <= std_logic_vector(signed(sext_ln32_2_fu_210_p1) + signed(req));
    add_ln34_fu_252_p2 <= std_logic_vector(signed(sext_ln32_2_reg_373) + signed(weight));
    add_ln52_fu_280_p2 <= std_logic_vector(signed(sext_ln32_reg_389) + signed(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);

    ap_ST_fsm_state10_blk_assign_proc : process(ap_block_state10_pp0_stage9_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state10_pp0_stage9_iter0)) then 
            ap_ST_fsm_state10_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state10_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(ap_block_state12_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state12_io)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(ap_block_state20_pp0_stage19_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state20_pp0_stage19_iter0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_gmem_ARREADY)
    begin
        if ((m_axi_gmem_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state10_pp0_stage9_iter0_assign_proc : process(m_axi_gmem_RVALID)
    begin
                ap_block_state10_pp0_stage9_iter0 <= (m_axi_gmem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state12_io_assign_proc : process(icmp_ln32_reg_394, m_axi_gmem_ARREADY)
    begin
                ap_block_state12_io <= ((m_axi_gmem_ARREADY = ap_const_logic_0) and (icmp_ln32_reg_394 = ap_const_lv1_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_block_state20_pp0_stage19_iter0_assign_proc : process(icmp_ln32_reg_394, m_axi_gmem_RVALID)
    begin
                ap_block_state20_pp0_stage19_iter0 <= ((m_axi_gmem_RVALID = ap_const_logic_0) and (icmp_ln32_reg_394 = ap_const_lv1_1));
    end process;


    ap_condition_exit_pp0_iter0_stage20_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2)
    begin
        if (((icmp_ln34_fu_276_p2 = ap_const_lv1_1) and (icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_condition_exit_pp0_iter0_stage20 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage20 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state21, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage20;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_p_load_assign_proc : process(ap_CS_fsm_state1, current_load, empty_fu_102, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_p_load <= current_load;
        else 
            ap_sig_allocacmp_p_load <= empty_fu_102;
        end if; 
    end process;

    counters_address0 <= counters_address0_local;

    counters_address0_local_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2, ap_CS_fsm_state11, icmp_ln32_fu_247_p2, counters_addr_reg_398, zext_ln32_fu_243_p1)
    begin
        if (((icmp_ln34_fu_276_p2 = ap_const_lv1_0) and (icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            counters_address0_local <= counters_addr_reg_398;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln32_fu_247_p2 = ap_const_lv1_1))) then 
            counters_address0_local <= zext_ln32_fu_243_p1(2 - 1 downto 0);
        else 
            counters_address0_local <= "XX";
        end if; 
    end process;

    counters_ce0 <= counters_ce0_local;

    counters_ce0_local_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2, ap_CS_fsm_state11, icmp_ln32_fu_247_p2)
    begin
        if ((((icmp_ln34_fu_276_p2 = ap_const_lv1_0) and (icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln32_fu_247_p2 = ap_const_lv1_1)))) then 
            counters_ce0_local <= ap_const_logic_1;
        else 
            counters_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    counters_d0 <= ap_const_lv32_0;
    counters_load_out <= counters_load_reg_409;

    counters_load_out_ap_vld_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln34_fu_276_p2 = ap_const_lv1_1) and (icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            counters_load_out_ap_vld <= ap_const_logic_1;
        else 
            counters_load_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    counters_we0 <= counters_we0_local;

    counters_we0_local_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2)
    begin
        if (((icmp_ln34_fu_276_p2 = ap_const_lv1_0) and (icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            counters_we0_local <= ap_const_logic_1;
        else 
            counters_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    current <= 
        sub_ln52_fu_310_p2 when (tmp_fu_285_p3(0) = '1') else 
        tmp_3_fu_316_p3;

    current_ap_vld_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and ((icmp_ln34_fu_276_p2 = ap_const_lv1_0) or (icmp_ln32_reg_394 = ap_const_lv1_0)))) then 
            current_ap_vld <= ap_const_logic_1;
        else 
            current_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(icmp_ln32_reg_394, m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(icmp_ln32_reg_394, m_axi_gmem_RVALID, ap_CS_fsm_state10, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    icmp_ln32_fu_247_p2 <= "1" when (gmem_addr_read_reg_384 = ap_const_lv32_1) else "0";
    icmp_ln34_fu_276_p2 <= "1" when (signed(counters_load_reg_409) < signed(gmem_addr_1_read_reg_415)) else "0";

    m_axi_gmem_ARADDR_assign_proc : process(icmp_ln32_reg_394, m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state12, gmem_addr_reg_378, gmem_addr_1_reg_403, ap_block_state12_io)
    begin
        if (((icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_io))) then 
            m_axi_gmem_ARADDR <= gmem_addr_1_reg_403;
        elsif (((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem_ARADDR <= gmem_addr_reg_378;
        else 
            m_axi_gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;

    m_axi_gmem_ARVALID_assign_proc : process(icmp_ln32_reg_394, m_axi_gmem_ARREADY, ap_CS_fsm_state2, ap_CS_fsm_state12, ap_block_state12_io)
    begin
        if ((((icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_boolean_0 = ap_block_state12_io)) or ((m_axi_gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            m_axi_gmem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;

    m_axi_gmem_RREADY_assign_proc : process(icmp_ln32_reg_394, ap_CS_fsm_state10, ap_CS_fsm_state20, ap_block_state10_pp0_stage9_iter0, ap_block_state20_pp0_stage19_iter0)
    begin
        if ((((icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20) and (ap_const_boolean_0 = ap_block_state20_pp0_stage19_iter0)) or ((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_boolean_0 = ap_block_state10_pp0_stage9_iter0)))) then 
            m_axi_gmem_RREADY <= ap_const_logic_1;
        else 
            m_axi_gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem_WDATA <= ap_const_lv32_0;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_0;
    m_axi_gmem_WUSER <= ap_const_lv1_0;
    m_axi_gmem_WVALID <= ap_const_logic_0;
    p_and_t_fu_302_p3 <= (ap_const_lv1_0 & xor_ln52_fu_297_p2);
    p_out <= p_load_reg_355;

    p_out_ap_vld_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln34_fu_276_p2 = ap_const_lv1_1) and (icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln52_fu_324_p3 <= 
        sub_ln52_fu_310_p2 when (tmp_fu_285_p3(0) = '1') else 
        tmp_3_fu_316_p3;
        sext_ln32_1_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_220_p4),64));

        sext_ln32_2_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_202_p3),64));

        sext_ln32_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_load_reg_355),4));

        sext_ln34_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_256_p4),64));

    shl_ln_fu_202_p1 <= ap_sig_allocacmp_p_load;
    shl_ln_fu_202_p3 <= (shl_ln_fu_202_p1 & ap_const_lv2_0);
    shl_ln_out <= shl_ln_reg_368;

    shl_ln_out_ap_vld_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln34_fu_276_p2 = ap_const_lv1_1) and (icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            shl_ln_out_ap_vld <= ap_const_logic_1;
        else 
            shl_ln_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln52_fu_310_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(p_and_t_fu_302_p3));
    tmp_3_fu_316_p3 <= (ap_const_lv1_0 & trunc_ln52_fu_293_p1);
    tmp_fu_285_p3 <= add_ln52_fu_280_p2(3 downto 3);
    trunc_ln1_fu_220_p4 <= add_ln32_fu_214_p2(63 downto 2);
    trunc_ln2_fu_256_p4 <= add_ln34_fu_252_p2(63 downto 2);
    trunc_ln32_fu_198_p0 <= ap_sig_allocacmp_p_load;
    trunc_ln32_fu_198_p1 <= trunc_ln32_fu_198_p0(2 - 1 downto 0);
    trunc_ln52_fu_293_p1 <= add_ln52_fu_280_p2(2 - 1 downto 0);
    xor_ln52_fu_297_p2 <= (trunc_ln32_reg_362 xor ap_const_lv2_3);
    zext_ln32_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_load_reg_355),64));
    zext_ln32_out <= trunc_ln32_reg_362;

    zext_ln32_out_ap_vld_assign_proc : process(ap_CS_fsm_state21, icmp_ln32_reg_394, icmp_ln34_fu_276_p2, ap_loop_exit_ready)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (icmp_ln34_fu_276_p2 = ap_const_lv1_1) and (icmp_ln32_reg_394 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            zext_ln32_out_ap_vld <= ap_const_logic_1;
        else 
            zext_ln32_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
